{
  "consumer": {
    "name": "Bikes UI"
  },
  "provider": {
    "name": "Bikes GraphQL Query"
  },
  "interactions": [
    {
      "description": "a request for reservation update",
      "providerState": "a user with reservation exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation UpdateReservation($cancelled: Boolean, $rating: Int, $reservationId: ID!){\n  updateReservation(input:{ cancelled: $cancelled,\n                            rating: $rating,\n                            reservationId: $reservationId} ){\n    reservation{\n      id,\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "reservationId": "UmVzZXJ2YXRpb24tMQ==",
            "rating": 2
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "updateReservation": {
              "reservation": {
                "id": "1"
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.updateReservation.reservation.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for reservation creation",
      "providerState": "a bike exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation CreateReservation($startDate: ISO8601Date!, $endDate: ISO8601Date!, $bikeId: ID!){\n  createReservation(input:{ startDate: $startDate,\n                            endDate: $endDate,\n                            bikeId: $bikeId} ){\n    reservation {\n      id,\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "bikeId": "QmlrZS0x",
            "startDate": "2041-10-22",
            "endDate": "2041-10-25"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "createReservation": {
              "reservation": {
                "id": "1"
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.createReservation.reservation.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for user delete",
      "providerState": "a user exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation DeleteUser($userId: ID!){\n  deleteUser(input: {userId: $userId}){\n    errors\n  }\n}\n",
          "variables": {
            "userId": "VXNlci0tMQ=="
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "deleteUser": {
              "errors": [

              ]
            }
          }
        }
      }
    },
    {
      "description": "a request for user update",
      "providerState": "a user exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation UpdateUsers($password: String, $admin: Boolean, $email: String, $userId: ID!){\n  updateUser(input: {password: $password,\n                     admin: $admin,\n                     email: $email,\n                     userId: $userId}){\n    user {\n      id,\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "email": "another_email@gmail.com",
            "userId": "VXNlci0tMQ=="
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "updateUser": {
              "user": {
                "id": "1"
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.updateUser.user.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for user creation",
      "providerState": "a user exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation createUser($email: String!, $admin: Boolean!, $password: String!){\n  createUser(input: {email: $email,\n                     admin: $admin,\n                     password: $password}){\n    user {\n      id,\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "admin": false,
            "email": "a_totally_new_email@gmail.com",
            "password": "password"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "createUser": {
              "user": {
                "id": "1"
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.createUser.user.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for bike creation",
      "providerState": "a bike model exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation createBikes($color: BikeColorsEnum!, $weight: Float!, $latitude: Float!, $longitude: Float!, $bikeModelId: ID!){\n  createBike(input: {color: $color,\n                     weight: $weight,\n                     latitude: $latitude,\n                     longitude: $longitude,\n                     bikeModelId: $bikeModelId}){\n    bike {\n      id\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "color": "red",
            "weight": 3.5,
            "bikeModelId": "QmlrZU1vZGVsLTE=",
            "latitude": 23.15,
            "longitude": 35.38
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "createBike": {
              "bike": {
                "id": "1"
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.createBike.bike.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for bike update",
      "providerState": "a red bike model exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation updateBike($color: BikeColorsEnum!, $weight: Float!, $bikeId: ID!){\n  updateBike(input: {color: $color,\n                     weight: $weight,\n                     bikeId: $bikeId}){\n    bike {\n      id,\n      color,\n      weight\n    },\n    errors,\n  }\n}\n",
          "variables": {
            "color": "blue",
            "weight": 4.5,
            "bikeId": "QmlrZS0x"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "updateBike": {
              "bike": {
                "id": "1",
                "color": "blue",
                "weight": 4.5
              },
              "errors": [

              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.updateBike.bike.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for bike delete",
      "providerState": "a bike exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "mutation DeleteBike($bikeId: ID!){\n  deleteBike(input: {bikeId: $bikeId}){\n    errors\n  }\n}\n",
          "variables": {
            "bikeId": "QmlrZS0x"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "deleteBike": {
              "errors": [

              ]
            }
          }
        }
      }
    },
    {
      "description": "a request for bike models",
      "providerState": "a bike model exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "{\n  bikeModels{\n    id,\n    text\n  }\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "bikeModels": [
              {
                "id": "1",
                "text": "Mountain"
              }
            ]
          }
        },
        "matchingRules": {
          "$.body.data.bikeModels[0].id": {
            "match": "type"
          },
          "$.body.data.bikeModels[0].text": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for users with reservations",
      "providerState": "a user with reservation exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "{\n  users{\n    nodes{\n      id,\n      reservations{\n        id,\n      }\n    }\n  }\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "users": {
              "nodes": [
                {
                  "id": "1",
                  "reservations": [
                    {
                      "id": "1"
                    }
                  ]
                }
              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.users.nodes[0].id": {
            "match": "type"
          },
          "$.body.data.users.nodes[0].reservations[0].id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a paginated request for users",
      "providerState": "a user exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "{\n  users{\n    edges{\n      cursor,\n    },\n    pageInfo {\n      endCursor,\n      hasNextPage,\n      hasPreviousPage,\n      startCursor,\n    },\n    totalCount,\n  },\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "users": {
              "edges": [
                {
                  "cursor": "cursor"
                }
              ],
              "pageInfo": {
                "endCursor": "cursor",
                "startCursor": "cursor",
                "hasNextPage": true,
                "hasPreviousPage": true
              },
              "totalCount": 1
            }
          }
        },
        "matchingRules": {
          "$.body.data.users.edges[0].cursor": {
            "match": "type"
          },
          "$.body.data.users.pageInfo.endCursor": {
            "match": "type"
          },
          "$.body.data.users.pageInfo.startCursor": {
            "match": "type"
          },
          "$.body.data.users.pageInfo.hasNextPage": {
            "match": "type"
          },
          "$.body.data.users.pageInfo.hasPreviousPage": {
            "match": "type"
          },
          "$.body.data.users.totalCount": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for bikes with reservations and models",
      "providerState": "a bike with reservation exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "{\n  bikes{\n    edges{\n      node {\n        id,\n        model{\n          text,\n        },\n        reservations {\n          cancelled,\n          user {\n            email,\n          }\n        }\n      }\n    }\n  }\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "bikes": {
              "edges": [
                {
                  "node": {
                    "id": "1",
                    "model": {
                      "text": "Mountain"
                    },
                    "reservations": [
                      {
                        "cancelled": false,
                        "user": {
                          "email": "boti@toptal.com"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.bikes.edges[0].node.id": {
            "match": "type"
          },
          "$.body.data.bikes.edges[0].node.model.text": {
            "match": "type"
          },
          "$.body.data.bikes.edges[0].node.reservations[0].user.email": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a paginated request for bikes",
      "providerState": "a bike exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "{\n  bikes{\n    edges{\n      cursor,\n    },\n    pageInfo {\n      endCursor,\n      hasNextPage,\n      hasPreviousPage,\n      startCursor,\n    },\n    totalCount,\n  }\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "bikes": {
              "edges": [
                {
                  "cursor": "cursor"
                }
              ],
              "pageInfo": {
                "endCursor": "cursor",
                "startCursor": "cursor",
                "hasNextPage": true,
                "hasPreviousPage": true
              },
              "totalCount": 1
            }
          }
        },
        "matchingRules": {
          "$.body.data.bikes.edges[0].cursor": {
            "match": "type"
          },
          "$.body.data.bikes.pageInfo.endCursor": {
            "match": "type"
          },
          "$.body.data.bikes.pageInfo.startCursor": {
            "match": "type"
          },
          "$.body.data.bikes.pageInfo.hasNextPage": {
            "match": "type"
          },
          "$.body.data.bikes.pageInfo.hasPreviousPage": {
            "match": "type"
          },
          "$.body.data.bikes.totalCount": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for available bikes",
      "providerState": "a bike exists",
      "request": {
        "method": "post",
        "path": "/graphql",
        "headers": {
          "X-Auth-Token": "token-xxx123123",
          "Content-Type": "application/json"
        },
        "body": {
          "query": "query AvailableBikes{\n  availableBikes(startDate: \"2021-10-22\", endDate:\"2021-10-25\"){\n    nodes{\n      id,\n      averageRating,\n      latitude,\n      longitude,\n      weight,\n      color,\n      model{\n        id\n      },\n      imageUrl\n    }\n  }\n}\n",
          "variables": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "availableBikes": {
              "nodes": [
                {
                  "id": "1",
                  "averageRating": 1.2,
                  "latitude": 1.2,
                  "longitude": 1.2,
                  "weight": 1.2,
                  "model": {
                    "id": "Mountain"
                  },
                  "imageUrl": null
                }
              ]
            }
          }
        },
        "matchingRules": {
          "$.body.data.availableBikes.nodes[0].id": {
            "match": "type"
          },
          "$.body.data.availableBikes.nodes[0].averageRating": {
            "match": "type"
          },
          "$.body.data.availableBikes.nodes[0].latitude": {
            "match": "type"
          },
          "$.body.data.availableBikes.nodes[0].longitude": {
            "match": "type"
          },
          "$.body.data.availableBikes.nodes[0].weight": {
            "match": "type"
          },
          "$.body.data.availableBikes.nodes[0].model.id": {
            "match": "type"
          }
        }
      }
    }
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0"
    }
  }
}